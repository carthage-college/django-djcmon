[uwsgi]
project = djcmon
plugins = python3
base = /data2/python_venv/3.10/%(project)/lib/django-%(project)
pythonpath = /data2/python_venv/3.10/%(project)/lib/python3.10/
chdir = %(base)/%(project)
enable-threads=false
home = /data2/python_venv/3.10/%(project)/
module = %(project).wsgi:application
env = DJANGO_SETTINGS_MODULE=%(project).settings
touch-reload = %(base)/%(project)/wsgi.py
#callable = app # for what is 'callable' used?
#wsgi-file = %(base)/%(project)/wsgi.py
#wsgi-file = %(project)/wsgi.py
#LANG = en_US.UTF-8
# respawn processes after serving 5000 requests
max-requests=5000
# respawn processes taking more than 60 seconds
#harakiri=60
# limit the project to 128 MB
#limit-as = 128
socket = %(base)/uwsgi/%(project).socket
chmod-socket = 666
logto = /var/log/uwsgi/%(project).log
#daemonize = /var/log/uwsgi/%(project).log
pidfile=/tmp/uwsgi-%(project).pid
uid = www-data
gui = www-data
#uid = 33
#gui = 33
# number of worker processes
processes = 1
workers = 1
master = true
# increasing buffer-size prevents errors like:
# invalid request block size: 4338 (max 4096)...skip
# on big POST or GET requests
buffer-size = 65535
# number of worker processes
# clear environment on exit
vacuum = true
max-requests = 5000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 120            ; How long to wait before forcefully killing workers
